generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(255)
  password         String           @db.VarChar(255)
  email            String           @db.VarChar(255)
  online           Boolean          @default(false)
  lastSeen         DateTime?
  createdAt        DateTime         @default(now())
  friendsInitiated UserConnection[] @relation("UserFriends")
  friendsReceived  UserConnection[] @relation("FriendOfUsers")
  sentMessages     Message[]        @relation("SentMessages")
  receivedMessages Message[]        @relation("ReceivedMessages")
}

model UserConnection {
  userId     Int      @map("user_id")
  friendId   Int      @map("friend_id")
  user       User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend     User     @relation("FriendOfUsers", fields: [friendId], references: [id], onDelete: Cascade)
  isFavorite Boolean  @default(false)
  isBlocked  Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")

  @@id([userId, friendId])
  @@map("user_connections")
}

model Message {
  id          Int       @id @default(autoincrement())
  senderId    Int       @map("sender_id")
  receiverId  Int       @map("receiver_id")
  content     String    @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  readAt      DateTime? @map("read_at")
  isDelivered Boolean   @default(false)
  isBot       Boolean   @default(false) // Novo campo para identificar mensagens do bot

  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@map("messages")
}
